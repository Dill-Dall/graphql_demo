package no.dilldall.graphql_demo

import org.junit.jupiter.api.Test
import org.mockito.kotlin.any
import org.mockito.kotlin.whenever
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.autoconfigure.graphql.GraphQlTest
import org.springframework.boot.test.mock.mockito.MockBean
import org.springframework.graphql.test.tester.GraphQlTester
import java.util.UUID

@GraphQlTest(TodoController::class)
class TodoControllerTests {

    @Autowired
    private lateinit var graphQlTester: GraphQlTester

    @MockBean
    private lateinit var todoItemRepository: TodoItemRepository

    @Test
    fun shouldAddTodoItem() {
        // Mock the repository's save method
        val savedItem = TodoItem(
            id = UUID.fromString("C1FABFFE-6EEF-4B1E-9884-18B85D86997A"),
            name = "Test Todo",
            description = "This is a test todo",
            completed = false
        )
        whenever(todoItemRepository.save(any())).thenReturn(savedItem)

        // Perform the test
        graphQlTester
            .document(
                """
                mutation {
                    addTodoItem(name: "Test Todo", description: "This is a test todo") {
                        id
                        name
                        description
                        completed
                    }
                }
                """
            )
            .execute()
            .path("data.addTodoItem")
            .matchesJson(
                """
                {
                    "id": 1,
                    "name": "Test Todo",
                    "description": "This is a test todo",
                    "completed": false
                }
                """
            )
    }

    @Test
    fun shouldGetTodos() {
        // Mock the repository's findAll method
        val todoItems = listOf(
            TodoItem(
                id = UUID.fromString("C1FABFFE-6EEF-4B1E-9884-18B85D86997A"),
                name = "Test Todo",
                description = "This is a test todo",
                completed = false
            )
        )
        whenever(todoItemRepository.findAll()).thenReturn(todoItems)

        // Perform the test
        graphQlTester
            .document(
                """
                query {
                    todos {
                        id
                        name
                        description
                        completed
                    }
                }
                """
            )
            .execute()
            .path("data.todos")
            .entityList(TodoItem::class.java)
            .hasSize(1)
    }
}
